#on: [push]
name: Publish Bicep module

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  publish-bicep:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@main

      # Log into Azure
      - name: 'Az CLI login'  
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Install Bicep
      #- name: Install Bicep
      #  run: |
      #    az version
      #    az bicep install

      - name: Semantic 
        id: semantic
        uses: paulhatch/semantic-version@v5.0.2
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          
          # A string to determine the format of the version output
          #version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          version_format: "${major}.${minor}.${patch}-prerelease${increment}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "modules/azure-container-registry"
          # Named version, will be used as suffix for name version tag
          namespace: my-service
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: false
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: true

      # Publish Bicep Modules (TEST)
      - name: Publish Bicep modules to ACR
        run: echo ${{ steps.semantic.outputs.version }}    


      # Publish Bicep Modules
      #- name: Publish Bicep modules to ACR
      #  run: |
      #    # loop through each directory and publish
      #    for d in */
      #    do
      #      cd $d
      #      version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor')"
      #      if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/modules/${d::-1}:$version 2>/dev/null)" ]; 
      #      then 
      #        echo "Publishing br:${{ secrets.ACR_SERVER }}/bicep/modules/${d::-1}:$version";
      #        # Publish Bicep Module to ACR
      #        echo "Publishing Bicep Module to the ACR"
      #        az bicep publish --file storage.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/modules/${d::-1}:$version";
      #      else 
      #        echo "Skipping br:${{ secrets.ACR_SERVER }}/bicep/modules/${d::-1}:$version as it already exists";
      #      fi
      #      cd - > /dev/null
      #    done          
      #  working-directory: modules