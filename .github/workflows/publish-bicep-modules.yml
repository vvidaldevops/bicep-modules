#on: [push]
name: Publish Bicep module

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  Publish-Bicep-Modules-to-ACR:
    runs-on: ubuntu-latest
    
    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@main

      # Log into Azure
      - name: 'Az CLI login'  
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Install Bicep
      #- name: Install Bicep
      #  run: |
      #    az version
      #    az bicep install

      # Publish Bicep Components Modules
      - name: Publish Modules to ACR
        run: |
          # loop through each directory and publish
          # for d in */

          # Loop through App Service components directory
          for d in appservice
          do
            cd $d
            version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor').$(cat metadata.json | jq -r '.version.patch')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/components/$d:$version 2>/dev/null)" ]; 
            then 
              echo "Publishing br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
              az bicep publish --file appservice.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
            else 
              echo "Skipping br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version as it already exists";
            fi
            cd - > /dev/null
          done

          # Loop through App Service Plan components directory
          for d in appserviceplan
          do
            cd $d
            version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/components/$d:$version 2>/dev/null)" ]; 
            then 
              echo "Publishing br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
              az bicep publish --file appserviceplan.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
            else 
              echo "Skipping br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version as it already exists";
            fi
            cd - > /dev/null
          done

          # Loop through Storage Account components directory
          for d in storage-account
          do
            cd $d
            version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/components/$d:$version 2>/dev/null)" ]; 
            then 
              echo "Publishing br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
              az bicep publish --file storage.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
            else 
              echo "Skipping br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version as it already exists";
            fi
            cd - > /dev/null
          done           
        working-directory: modules/components

      # Publish Bicep Patterns Modules
      - name: Publish Patterns to ACR
        run: |
          # loop through each directory and publish
          # for d in */

          # Loop through App Service patterns directory
          for d in appservice
          do
            cd $d
            version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/patterns/$d:$version 2>/dev/null)" ]; 
            then 
              echo "Publishing br:${{ secrets.ACR_SERVER }}/bicep/patterns/$d:$version";
              az bicep publish --file simple-appservice.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/patterns/$d:$version";
            else 
              echo "Skipping br:${{ secrets.ACR_SERVER }}/bicep/patterns/$d:$version as it already exists";
            fi
            cd - > /dev/null
          done

          # Loop through Storage Account patterns directory
          for d in storage-account
          do
            cd $d
            version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/patterns/$d:$version 2>/dev/null)" ]; 
            then 
              echo "Publishing br:${{ secrets.ACR_SERVER }}/bicep/patterns/$d:$version";
              az bicep publish --file simple-storage.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/patterns/$d:$version";
            else 
              echo "Skipping br:${{ secrets.ACR_SERVER }}/bicep/patterns/$d:$version as it already exists";
            fi
            cd - > /dev/null
          done           
        working-directory: modules/patterns













      ## Publish Bicep Components Modules
      #- name: Publish Components to ACR
      #  run: |
      #    az bicep publish --file storage-account/storage.bicep --target "br:vidalabacr.azurecr.io/bicep/components/storage-account:v1.0.0" --force;
      #    az bicep publish --file appserviceplan/appserviceplan.bicep --target "br:vidalabacr.azurecr.io/bicep/components/appserviceplan:v1.0.0" --force;
      #    az bicep publish --file appservice/appservice.bicep --target "br:vidalabacr.azurecr.io/bicep/components/appservice:v1.0.0" --force;
      #  working-directory: modules/components/
      #
      # # Publish Bicep Patterns Modules
      #- name: Publish Bicep Patterns to ACR
      #  run: |
      #    az bicep publish --file storage-account/simple-storage.bicep --target "br:vidalabacr.azurecr.io/bicep/patterns/simple-storage:v1.0.0" --force;
      #    az bicep publish --file appservice/simple-appservice.bicep --target "br:vidalabacr.azurecr.io/bicep/patterns/simple-appservice:v1.0.0" --force;
      #  working-directory: modules/patterns/