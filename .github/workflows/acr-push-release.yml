name: Deploy Modules in ACR and create Release
on:  
  pull_request:
    branches:
      - main
  
jobs:
  compare-modules:
    name: "Compare modules in ACR"
    runs-on: ubuntu-latest
    steps:

    # Checkout code
    - name: Checkout
      uses: actions/checkout@main

    # Log into Azure
    - name: Az CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Loop to Folder Names
      run: |
        folder_array=()
        for f in modules/components/*/; do

            folder_name=$(basename "$f")
            folder_array+=("$folder_name")
        done

        for folder in "${folder_array[@]}"; do
            echo "$folder"
        done

    # Compare and prepare to push modules to ACR
    - name: Compare Modules in ACR
      run: |
          # Loop through components directory
          cd modules
          for d in "${folder_array[@]}" ; do
            cd $d
            VERSION="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor').$(cat metadata.json | jq -r '.version.patch')"
            echo "Version in Metadata file: $VERSION"
            TAGS=$(az acr repository show-manifests --name ${{ secrets.ACR_SERVER }} --repository bicep/components/$d --query "[].tags" --output tsv)
            for TAG in $TAGS; do
                if ["$TAG" = "$VERSION"]; then 
                    echo "Found a matching tag: $TAG. Skipping deploy"
                    FOUND_TAG=true
                    break
                fi
            done

            if [ "$FOUND_TAG" = false ]; then
                echo "Version not found. Next step will deploy a new image to ACR..."
            fi
            cd ..
          done
  
  publish-modules:
    name: "Publish modules to ACR"
    needs: compare-modules
    environment:
      name: stg
    runs-on: ubuntu-latest
    steps:

    # Checkout code
    - name: Checkout
      uses: actions/checkout@main

    # Log into Azure
    - name: Az CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    #Loop to get modules folder names
    - name: Loop to Folder Names
      run: |
        folder_array=()
        for f in modules/components/*/; do

            folder_name=$(basename "$f")
            folder_array+=("$folder_name")
        done

        for folder in "${folder_array[@]}"; do
            echo "$folder"
        done

    # Push modules to ACR
    - name: Publish Modules to ACR
      run: |
        # Loop through components directory
        cd modules
        for d in "${folder_array[@]}" ; do
        cd $d
        VERSION="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor').$(cat metadata.json | jq -r '.version.patch')"
        echo "Version in Metadata file: $VERSION"
        TAGS=$(az acr repository show-manifests --name ${{ secrets.ACR_SERVER }} --repository bicep/components/$d --query "[].tags" --output tsv)
        for TAG in $TAGS; do
            if ["$TAG" = "$VERSION"]; then 
                echo "Found a matching tag: $TAG. Skipping deploy"
                FOUND_TAG=true
                break
            fi
        done

        if [ "$FOUND_TAG" = false ]; then
            echo "Version not found. Next step will deploy a new image to ACR..."
            az bicep publish --file $d.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$version";
        fi
        cd ..
        done

  create-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: "Create release"
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: publish-modules
    outputs:
      tag: ${{ steps.changelog.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:  
      - name: Checkout
        uses: actions/checkout@v3
      - name: Conventional Changelog Action
        id: changelog 
        uses: TriPSs/conventional-changelog-action@v3 
        with: 
          github-token: ${{ secrets.github_token }}
          output-file: 'false' 
          skip-commit: 'true'
          skip-tag: 'false'
      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' && github.ref == 'refs/heads/main'}} 
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          tag_name: ${{ steps.changelog.outputs.tag }} 
          release_name: ${{ steps.changelog.outputs.tag }} 
          body: ${{ steps.changelog.outputs.clean_changelog }}

  create-comment:
    runs-on: ubuntu-latest
    needs: [publish-modules,create-release]
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:  
      - uses: actions/checkout@v3
      - name: 'Create issue'
        id: create-issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.create-release.outputs.tag }} 
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ steps.create-issue.outputs.number }} 
          body: |
            New container created and published!
            ## New tag: ${{ needs.create-release.outputs.tag }}
            ${{ needs.create-release.outputs.changelog }} 
          reactions: rocket

        
 
     