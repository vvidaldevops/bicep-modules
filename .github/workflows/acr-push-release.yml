name: Deploy Modules in ACR and create Release
on:  
  pull_request:
    branches:
      - main
  
jobs:
  compare-modules:
    name: "Compare modules in ACR"
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@master
      with:
        ref: ${{ github.ref }}

    # Log into Azure
    - name: Az CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Compare Bicep Components Modules
    - name: Comparing modules versions
      run: |
        folders=()
        for f in modules/components/*/; do

            folder_name=$(basename "$f")
            folders+=("$folder_name")
        done

        echo "***************************************"

        for d in "${folders[@]}" ; do

            cd modules/components/$d
            major_version="v$(cat metadata.json | jq -r '.version.major')"
            semantic_version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor').$(cat metadata.json | jq -r '.version.patch')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/components/$d:$semantic_version 2>/dev/null)" ]; 
            then 
                echo "*NEW VERSION* ---> $d - $semantic_version. It will be deployed in next task.";
                echo "*The major version $major_version will also be updated to the semantic version above.*";
            fi

            cd - > /dev/null
        done

        echo "***************************************"

  # Publish modules to ACR
  publish-modules:
    name: "Publish modules to ACR"
    needs: compare-modules
    runs-on: ubuntu-latest
    steps:
    
    - uses: actions/checkout@master
      with:
        ref: ${{ github.ref }}

    # Log into Azure
    - name: Az CLI login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Publish Bicep Components Modules
    - name: Publish Modules to ACR
      run: |
        folders=()
        for f in modules/components/*/; do
            folder_name=$(basename "$f")
            folders+=("$folder_name")
        done

        echo "***************************************"

        for d in "${folders[@]}" ; do

            cd modules/components/$d

            major_version="v$(cat metadata.json | jq -r '.version.major')"
            semantic_version="v$(cat metadata.json | jq -r '.version.major').$(cat metadata.json | jq -r '.version.minor').$(cat metadata.json | jq -r '.version.patch')"
            if [ -z "$(az acr repository show -n ${{ secrets.ACR_SERVER }} --image bicep/components/$d:$semantic_version 2>/dev/null)" ]; 
            then 
                echo "Pushing new image: $d $semantic_version";
                az bicep publish --file $d.bicep --target "br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$semantic_version";
                echo "Updating major image: $major_version";
                az bicep publish --file $d.bicep --target --force "br:${{ secrets.ACR_SERVER }}/bicep/components/$d:$major_version";
            fi

            cd - > /dev/null
        done

        echo "***************************************"

  # Create release
  create-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: "Create release"
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: publish-modules
    outputs:
      tag: ${{ steps.changelog.outputs.tag }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:  
      - name: Checkout
        uses: actions/checkout@v3
      - name: Conventional Changelog Action
        id: changelog 
        uses: TriPSs/conventional-changelog-action@v3 
        with: 
          github-token: ${{ secrets.github_token }}
          output-file: 'false' 
          skip-commit: 'true'
          skip-tag: 'false'
      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' && github.ref == 'refs/heads/main'}} 
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          tag_name: ${{ steps.changelog.outputs.tag }} 
          release_name: ${{ steps.changelog.outputs.tag }} 
          body: ${{ steps.changelog.outputs.clean_changelog }}

  create-comment:
    runs-on: ubuntu-latest
    needs: [publish-modules,create-release]
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:  
      - uses: actions/checkout@v3
      - name: 'Create issue'
        id: create-issue
        uses: JasonEtco/create-an-issue@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.create-release.outputs.tag }} 
      - name: Create comment
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ steps.create-issue.outputs.number }} 
          body: |
            New container created and published!
            ## New tag: ${{ needs.create-release.outputs.tag }}
            ${{ needs.create-release.outputs.changelog }} 
          reactions: rocket

        
 
     